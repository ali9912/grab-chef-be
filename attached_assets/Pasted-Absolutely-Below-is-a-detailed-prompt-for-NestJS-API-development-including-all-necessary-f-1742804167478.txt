Absolutely! Below is a **detailed prompt** for **NestJS API development**, including all necessary fields required for the API requests, pagination where applicable, and additional details for implementing the features efficiently.

---

### **Complete Prompt for Replit - Backend Development for "Grab Chef" in NestJS**

---

### **Project Overview**:
You are tasked with developing the backend for the **Grab Chef** platform using **NestJS** and **MongoDB**. This platform connects **Customers** with **Chefs** who can offer event-based services like meal preparation. The backend should include authentication, role-based access, menu management, event booking, reviews, and admin verification.

---

### **Technologies to Use:**
- **NestJS** (Backend Framework)
- **MongoDB** (Database)
- **Twilio** (For OTP verification)
- **AWS S3** (For file storage)
- **JWT** (For user authentication and authorization)
- **Mongoose** (MongoDB ODM)

---

### **1. Authentication & User Management:**

1. **User Registration & Authentication**:
   - **Register a user (Chef or Customer)**: Collect basic information (first name, last name, email, phone number) and send an **OTP** for phone number verification.
   - **OTP verification**: Send via Twilio or any SMS service.
   - **JWT** Authentication for securing API endpoints after registration.

2. **API Endpoints**:

   - **POST `/auth/register`** – Register a new user (Customer or Chef).
     - **Payload**:
       ```json
       {
         "firstName": "John",
         "lastName": "Doe",
         "email": "john@example.com",
         "phoneNumber": "+1234567890"
       }
       ```

     - **Response**: 
       ```json
       {
         "message": "OTP sent to phone number"
       }
       ```

   - **POST `/auth/verify-otp`** – Verify OTP sent to phone number.
     - **Payload**:
       ```json
       {
         "phoneNumber": "+1234567890",
         "otp": "123456"
       }
       ```

     - **Response**:
       ```json
       {
         "token": "JWT_Token",
         "message": "User verified and logged in"
       }
       ```

   - **POST `/auth/login`** – Login using phone number and OTP.
     - **Payload**:
       ```json
       {
         "phoneNumber": "+1234567890",
         "otp": "123456"
       }
       ```

     - **Response**:
       ```json
       {
         "token": "JWT_Token"
       }
       ```

---

### **2. Chef Registration & Menu Management:**

1. **Chef Registration**: After user verification, the Chef can upload their **ID Card** (PDF/PNG/JPG) and **certification files** (ZIP) for admin verification.
2. **Menu Management**: Chefs can manage their menu, categorize items, and upload images (multiple) for each menu item. Tax calculation is 15% of the total order amount.

3. **API Endpoints**:

   - **POST `/chef/register`** – Upload Chef documents and certifications.
     - **Payload**:
       ```json
       {
         "idCard": "file",      // PDF/PNG/JPG file
         "certifications": "file",  // ZIP folder
         "cuisine": "Italian",
         "bio": "Experienced Chef with 10+ years of experience in Italian Cuisine"
       }
       ```

     - **Response**:
       ```json
       {
         "message": "Chef registered, awaiting admin verification"
       }
       ```

   - **GET `/chef/{chefId}/status`** – Check Chef's verification status.
     - **Response**:
       ```json
       {
         "status": "approved"  // or "pending" / "rejected"
       }
       ```

   - **POST `/chef/menu`** – Add a new menu item.
     - **Payload**:
       ```json
       {
         "title": "Spaghetti Carbonara",
         "description": "Classic Italian pasta with pancetta and egg",
         "price": 15.99,
         "images": ["s3_image_url1", "s3_image_url2"],
         "category": "Main Course",  // Can be "Appetizers", "Main Course", etc.
         "isSpecial": true,  // Whether it's a Chef’s special
         "minOrderQty": 1  // Minimum order quantity
       }
       ```

     - **Response**:
       ```json
       {
         "message": "Menu item added successfully"
       }
       ```

   - **PUT `/chef/menu/{menuItemId}`** – Edit an existing menu item.
     - **Payload**: (same as `/chef/menu`)
     - **Response**:
       ```json
       {
         "message": "Menu item updated successfully"
       }
       ```

---

### **3. Customer Location Management:**

1. **Customer Location**: Customers can add locations (Home, Work, etc.) using latitude, longitude, street address, and city. They can also name their locations.

2. **API Endpoints**:

   - **POST `/customer/locations`** – Add a new location.
     - **Payload**:
       ```json
       {
         "name": "Home", // Name for the location (e.g., "Home", "Work")
         "longitude": "12.9716",
         "latitude": "77.5946",
         "street": "Street 1",
         "houseNumber": "101",
         "city": "Bangalore",
         "country": "India"
       }
       ```

     - **Response**:
       ```json
       {
         "message": "Location added successfully"
       }
       ```

   - **GET `/customer/locations`** – Get all saved locations for the customer.
     - **Response**:
       ```json
       [
         {
           "id": "location1_id",
           "name": "Home",
           "longitude": "12.9716",
           "latitude": "77.5946",
           "street": "Street 1",
           "houseNumber": "101",
           "city": "Bangalore",
           "country": "India"
         },
         {
           "id": "location2_id",
           "name": "Work",
           "longitude": "12.9392",
           "latitude": "77.6106",
           "street": "Street 2",
           "houseNumber": "102",
           "city": "Bangalore",
           "country": "India"
         }
       ]
       ```

---

### **4. Event/Booking System:**

1. **Booking Process**: Customers can book Chefs based on location, date, and menu items. Chefs must confirm bookings. Once confirmed, the event is scheduled.

2. **API Endpoints**:

   - **POST `/event/booking`** – Customer creates a booking request.
     - **Payload**:
       ```json
       {
         "chefId": "chefId",
         "locationId": "locationId",
         "menuItems": [
           { "menuItemId": "item1", "quantity": 2 },
           { "menuItemId": "item2", "quantity": 1 }
         ],
         "dateTime": "2025-03-25T19:00:00",
         "specialRequests": "Please avoid spicy ingredients."
       }
       ```

     - **Response**:
       ```json
       {
         "message": "Booking request sent to chef"
       }
       ```

   - **POST `/event/booking/{eventId}/confirm`** – Chef confirms or rejects the booking.
     - **Payload**:
       ```json
       {
         "status": "confirmed",  // or "rejected"
         "reason": "Chef is unavailable"  // Custom reason for rejection
       }
       ```

     - **Response**:
       ```json
       {
         "message": "Booking status updated"
       }
       ```

   - **GET `/event/booking/{eventId}/status`** – Get the status of a booking.
     - **Response**:
       ```json
       {
         "status": "confirmed"  // "pending", "confirmed", or "cancelled"
       }
       ```

   - **POST `/event/attendance/{eventId}`** – Chef marks attendance for the event.
     - **Payload**:
       ```json
       {
         "status": "attended",  // or "no-show"
         "remarks": "Event was successful."
       }
       ```

     - **Response**:
       ```json
       {
         "message": "Attendance marked"
       }
       ```

---

### **5. Pagination**:

1. **Pagination for lists**:
   - **GET `/chef/list`** – List all chefs with optional filters (e.g., location, rating).
     - **Request**:
       ```json
       {
         "page": 1,   // Page number
         "limit": 10   // Items per page
       }
       ```

     - **Response**:
       ```json
       {
         "chefs": [
           {
             "id": "chef1_id",
             "name": "Chef John",
             "cuisine": "Italian",
             "rating": 4.5
           },
           {
             "id": "chef2_id",
             "name": "Chef Jane",
             "cuisine": "

Indian",
             "rating": 4.2
           }
         ],
         "totalCount": 50,   // Total number of chefs available
         "page": 1,
         "limit": 10
       }
       ```

2. **Pagination for Events**:
   - **GET `/event/list`** – List all events (bookings).
     - **Request**:
       ```json
       {
         "page": 1,   // Page number
         "limit": 10   // Items per page
       }
       ```

     - **Response**:
       ```json
       {
         "events": [
           {
             "eventId": "event1",
             "chefName": "Chef John",
             "status": "confirmed",
             "dateTime": "2025-03-25T19:00:00"
           }
         ],
         "totalCount": 100,   // Total number of events
         "page": 1,
         "limit": 10
       }
       ```

---

### **6. Review and Rating System**:

1. **Reviews**: After the event, customers can submit reviews and ratings.

2. **API Endpoints**:

   - **POST `/review/{eventId}`** – Submit a review for a Chef after an event.
     - **Payload**:
       ```json
       {
         "rating": 4,   // Rating (1 to 5)
         "review": "Excellent service, food was amazing!"
       }
       ```

     - **Response**:
       ```json
       {
         "message": "Review submitted successfully"
       }
       ```

---

### **Final Notes**:
- Ensure the proper **file validation** for uploads (PDF, PNG, JPG, ZIP).
- Implement **rate limiting** to prevent abuse, especially for OTP generation and API requests.
- Set up **middleware** for JWT validation on protected routes.
- Add **logging** for easier debugging and production monitoring.

---

This prompt should give a comprehensive outline of how to build the backend API with all the necessary fields, endpoints, pagination, and file handling. Let me know if you'd like any further details or adjustments!